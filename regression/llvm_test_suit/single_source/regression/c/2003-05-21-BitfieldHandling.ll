; ModuleID = '2003-05-21-BitfieldHandling.c'
source_filename = "2003-05-21-BitfieldHandling.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.test1 = type { i8, [7 x i8] }
%struct.test2 = type { i8, [7 x i8] }
%struct.test3 = type { [3 x i8] }
%struct.test4 = type <{ i24, i16 }>
%struct.test5 = type { [3 x i8] }
%struct.test6 = type { i64 }
%struct.test = type { i8, i8, [2 x i8], i8, i8, [2 x i8] }
%struct.test_empty = type {}
%struct.rtx_def = type { i16, i16, i64 }

@Esize = global i32 0, align 4, !dbg !0
@N = global { i16, i8, i8, [4 x i8], i8, i8, i8, i8, i8, i8, i8, i8 } { i16 2, i8 56, i8 0, [4 x i8] undef, i8 1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0 }, align 8, !dbg !8
@Nsize = global i32 16, align 4, !dbg !18
@F1size = global i32 8, align 4, !dbg !20
@F2size = global i32 8, align 4, !dbg !22
@F3size = global i32 3, align 4, !dbg !24
@F4size = global i32 6, align 4, !dbg !26
@F5size = global i32 3, align 4, !dbg !28
@F6size = global i32 8, align 4, !dbg !30
@Msize = global i32 8, align 4, !dbg !32
@F1 = common global %struct.test1 zeroinitializer, align 1, !dbg !37
@F2 = common global %struct.test2 zeroinitializer, align 8, !dbg !43
@F3 = common global %struct.test3 zeroinitializer, align 1, !dbg !48
@F4 = common global %struct.test4 zeroinitializer, align 2, !dbg !53
@F5 = common global %struct.test5 zeroinitializer, align 1, !dbg !60
@F6 = common global %struct.test6 zeroinitializer, align 4, !dbg !66
@M = common global %struct.test zeroinitializer, align 8, !dbg !72
@e = common global %struct.test_empty zeroinitializer, align 1, !dbg !34

; Function Attrs: noinline nounwind optnone uwtable
define i32 @main() #0 !dbg !85 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = load i16, i16* getelementptr inbounds (%struct.rtx_def, %struct.rtx_def* bitcast ({ i16, i8, i8, [4 x i8], i8, i8, i8, i8, i8, i8, i8, i8 }* @N to %struct.rtx_def*), i32 0, i32 0), align 8, !dbg !87
  %conv = zext i16 %0 to i32, !dbg !88
  %cmp = icmp eq i32 %conv, 2, !dbg !89
  %conv1 = zext i1 %cmp to i32, !dbg !89
  %call = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv1), !dbg !90
  %bf.load = load i16, i16* getelementptr inbounds (%struct.rtx_def, %struct.rtx_def* bitcast ({ i16, i8, i8, [4 x i8], i8, i8, i8, i8, i8, i8, i8, i8 }* @N to %struct.rtx_def*), i32 0, i32 1), align 2, !dbg !91
  %bf.shl = shl i16 %bf.load, 5, !dbg !91
  %bf.ashr = ashr i16 %bf.shl, 8, !dbg !91
  %bf.cast = sext i16 %bf.ashr to i32, !dbg !91
  %cmp2 = icmp eq i32 %bf.cast, 7, !dbg !92
  %conv3 = zext i1 %cmp2 to i32, !dbg !92
  %call4 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv3), !dbg !93
  %bf.load5 = load i64, i64* getelementptr inbounds (%struct.rtx_def, %struct.rtx_def* bitcast ({ i16, i8, i8, [4 x i8], i8, i8, i8, i8, i8, i8, i8, i8 }* @N to %struct.rtx_def*), i32 0, i32 2), align 8, !dbg !94
  %bf.shl6 = shl i64 %bf.load5, 33, !dbg !94
  %bf.ashr7 = ashr i64 %bf.shl6, 33, !dbg !94
  %conv8 = trunc i64 %bf.ashr7 to i32, !dbg !95
  %cmp9 = icmp eq i32 %conv8, 1, !dbg !96
  %conv10 = zext i1 %cmp9 to i32, !dbg !96
  %call11 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv10), !dbg !97
  %bf.load12 = load i64, i64* getelementptr inbounds (%struct.rtx_def, %struct.rtx_def* bitcast ({ i16, i8, i8, [4 x i8], i8, i8, i8, i8, i8, i8, i8, i8 }* @N to %struct.rtx_def*), i32 0, i32 2), align 8, !dbg !98
  %bf.shl13 = shl i64 %bf.load12, 2, !dbg !98
  %bf.ashr14 = ashr i64 %bf.shl13, 33, !dbg !98
  %conv15 = trunc i64 %bf.ashr14 to i32, !dbg !99
  %cmp16 = icmp eq i32 %conv15, 0, !dbg !100
  %conv17 = zext i1 %cmp16 to i32, !dbg !100
  %call18 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv17), !dbg !101
  %bf.load19 = load i8, i8* getelementptr inbounds (%struct.test1, %struct.test1* @F1, i32 0, i32 0), align 1, !dbg !102
  %bf.shl20 = shl i8 %bf.load19, 7, !dbg !102
  %bf.ashr21 = ashr i8 %bf.shl20, 7, !dbg !102
  %conv22 = sext i8 %bf.ashr21 to i32, !dbg !103
  %cmp23 = icmp eq i32 %conv22, 0, !dbg !104
  %conv24 = zext i1 %cmp23 to i32, !dbg !104
  %call25 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv24), !dbg !105
  %bf.load26 = load i8, i8* getelementptr inbounds (%struct.test2, %struct.test2* @F2, i32 0, i32 0), align 8, !dbg !106
  %bf.shl27 = shl i8 %bf.load26, 4, !dbg !106
  %bf.ashr28 = ashr i8 %bf.shl27, 4, !dbg !106
  %bf.cast29 = sext i8 %bf.ashr28 to i64, !dbg !106
  %conv30 = trunc i64 %bf.cast29 to i32, !dbg !107
  %cmp31 = icmp eq i32 %conv30, 0, !dbg !108
  %conv32 = zext i1 %cmp31 to i32, !dbg !108
  %call33 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv32), !dbg !109
  %bf.load34 = load i24, i24* bitcast (%struct.test3* @F3 to i24*), align 1, !dbg !110
  %bf.shl35 = shl i24 %bf.load34, 23, !dbg !110
  %bf.ashr36 = ashr i24 %bf.shl35, 23, !dbg !110
  %bf.cast37 = trunc i24 %bf.ashr36 to i8, !dbg !110
  %conv38 = sext i8 %bf.cast37 to i32, !dbg !111
  %cmp39 = icmp eq i32 %conv38, 0, !dbg !112
  %conv40 = zext i1 %cmp39 to i32, !dbg !112
  %call41 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv40), !dbg !113
  %bf.load42 = load i32, i32* bitcast (%struct.test4* @F4 to i32*), align 2, !dbg !114
  %bf.shl43 = shl i32 %bf.load42, 31, !dbg !114
  %bf.ashr44 = ashr i32 %bf.shl43, 31, !dbg !114
  %bf.cast45 = trunc i32 %bf.ashr44 to i8, !dbg !114
  %conv46 = sext i8 %bf.cast45 to i32, !dbg !115
  %cmp47 = icmp eq i32 %conv46, 0, !dbg !116
  %conv48 = zext i1 %cmp47 to i32, !dbg !116
  %call49 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv48), !dbg !117
  %bf.load50 = load i24, i24* bitcast (%struct.test5* @F5 to i24*), align 1, !dbg !118
  %bf.shl51 = shl i24 %bf.load50, 23, !dbg !118
  %bf.ashr52 = ashr i24 %bf.shl51, 23, !dbg !118
  %bf.cast53 = trunc i24 %bf.ashr52 to i8, !dbg !118
  %conv54 = sext i8 %bf.cast53 to i32, !dbg !119
  %cmp55 = icmp eq i32 %conv54, 0, !dbg !120
  %conv56 = zext i1 %cmp55 to i32, !dbg !120
  %call57 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv56), !dbg !121
  %bf.load58 = load i64, i64* getelementptr inbounds (%struct.test6, %struct.test6* @F6, i32 0, i32 0), align 4, !dbg !122
  %bf.shl59 = shl i64 %bf.load58, 63, !dbg !122
  %bf.ashr60 = ashr i64 %bf.shl59, 63, !dbg !122
  %bf.cast61 = trunc i64 %bf.ashr60 to i8, !dbg !122
  %conv62 = sext i8 %bf.cast61 to i32, !dbg !123
  %cmp63 = icmp eq i32 %conv62, 0, !dbg !124
  %conv64 = zext i1 %cmp63 to i32, !dbg !124
  %call65 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv64), !dbg !125
  %bf.load66 = load i16, i16* getelementptr inbounds (%struct.test4, %struct.test4* @F4, i32 0, i32 1), align 2, !dbg !126
  %bf.shl67 = shl i16 %bf.load66, 2, !dbg !126
  %bf.ashr68 = ashr i16 %bf.shl67, 2, !dbg !126
  %conv69 = sext i16 %bf.ashr68 to i32, !dbg !127
  %cmp70 = icmp eq i32 %conv69, 0, !dbg !128
  %conv71 = zext i1 %cmp70 to i32, !dbg !128
  %call72 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv71), !dbg !129
  %bf.load73 = load i24, i24* bitcast (%struct.test5* @F5 to i24*), align 1, !dbg !130
  %bf.shl74 = shl i24 %bf.load73, 5, !dbg !130
  %bf.ashr75 = ashr i24 %bf.shl74, 23, !dbg !130
  %bf.cast76 = trunc i24 %bf.ashr75 to i8, !dbg !130
  %conv77 = sext i8 %bf.cast76 to i32, !dbg !131
  %cmp78 = icmp eq i32 %conv77, 0, !dbg !132
  %conv79 = zext i1 %cmp78 to i32, !dbg !132
  %call80 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv79), !dbg !133
  %bf.load81 = load i64, i64* getelementptr inbounds (%struct.test6, %struct.test6* @F6, i32 0, i32 0), align 4, !dbg !134
  %bf.ashr82 = ashr i64 %bf.load81, 43, !dbg !134
  %bf.cast83 = trunc i64 %bf.ashr82 to i32, !dbg !134
  %cmp84 = icmp eq i32 %bf.cast83, 0, !dbg !135
  %conv85 = zext i1 %cmp84 to i32, !dbg !135
  %call86 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv85), !dbg !136
  %1 = load i8, i8* getelementptr inbounds (%struct.test, %struct.test* @M, i32 0, i32 0), align 8, !dbg !137
  %conv87 = sext i8 %1 to i32, !dbg !138
  %cmp88 = icmp eq i32 %conv87, 0, !dbg !139
  %conv89 = zext i1 %cmp88 to i32, !dbg !139
  %call90 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv89), !dbg !140
  %bf.load91 = load i8, i8* getelementptr inbounds (%struct.test, %struct.test* @M, i32 0, i32 1), align 1, !dbg !141
  %bf.shl92 = shl i8 %bf.load91, 5, !dbg !141
  %bf.ashr93 = ashr i8 %bf.shl92, 5, !dbg !141
  %conv94 = sext i8 %bf.ashr93 to i32, !dbg !142
  %cmp95 = icmp eq i32 %conv94, 0, !dbg !143
  %conv96 = zext i1 %cmp95 to i32, !dbg !143
  %call97 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv96), !dbg !144
  %bf.load98 = load i8, i8* getelementptr inbounds (%struct.test, %struct.test* @M, i32 0, i32 1), align 1, !dbg !145
  %bf.shl99 = shl i8 %bf.load98, 2, !dbg !145
  %bf.ashr100 = ashr i8 %bf.shl99, 5, !dbg !145
  %conv101 = sext i8 %bf.ashr100 to i32, !dbg !146
  %cmp102 = icmp eq i32 %conv101, 0, !dbg !147
  %conv103 = zext i1 %cmp102 to i32, !dbg !147
  %call104 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv103), !dbg !148
  %2 = load i8, i8* getelementptr inbounds (%struct.test, %struct.test* @M, i32 0, i32 3), align 4, !dbg !149
  %conv105 = sext i8 %2 to i32, !dbg !150
  %cmp106 = icmp eq i32 %conv105, 0, !dbg !151
  %conv107 = zext i1 %cmp106 to i32, !dbg !151
  %call108 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv107), !dbg !152
  %bf.load109 = load i8, i8* getelementptr inbounds (%struct.test, %struct.test* @M, i32 0, i32 4), align 1, !dbg !153
  %bf.shl110 = shl i8 %bf.load109, 4, !dbg !153
  %bf.ashr111 = ashr i8 %bf.shl110, 4, !dbg !153
  %bf.cast112 = sext i8 %bf.ashr111 to i64, !dbg !153
  %conv113 = trunc i64 %bf.cast112 to i32, !dbg !154
  %cmp114 = icmp eq i32 %conv113, 0, !dbg !155
  %conv115 = zext i1 %cmp114 to i32, !dbg !155
  %call116 = call i32 (i32, ...) bitcast (i32 (...)* @assert to i32 (i32, ...)*)(i32 %conv115), !dbg !156
  ret i32 0, !dbg !157
}

declare i32 @assert(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!81, !82, !83}
!llvm.ident = !{!84}

!0 = !DIGlobalVariableExpression(var: !1)
!1 = distinct !DIGlobalVariable(name: "Esize", scope: !2, file: !3, line: 3, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 5.0.1 (tags/RELEASE_501/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !7)
!3 = !DIFile(filename: "2003-05-21-BitfieldHandling.c", directory: "/home/ubuntu/llvm2goto/regression/llvm_test_suit/single_source/regression/c")
!4 = !{}
!5 = !{!6}
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !{!0, !8, !18, !20, !22, !24, !26, !28, !30, !32, !34, !37, !43, !48, !53, !60, !66, !72}
!8 = !DIGlobalVariableExpression(var: !9)
!9 = distinct !DIGlobalVariable(name: "N", scope: !2, file: !3, line: 12, type: !10, isLocal: false, isDefinition: true)
!10 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !3, line: 5, size: 128, elements: !11)
!11 = !{!12, !14, !15, !17}
!12 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !10, file: !3, line: 6, baseType: !13, size: 16)
!13 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!14 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !10, file: !3, line: 8, baseType: !6, size: 8, offset: 19, flags: DIFlagBitField, extraData: i64 16)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !10, file: !3, line: 10, baseType: !16, size: 31, offset: 64, flags: DIFlagBitField, extraData: i64 64)
!16 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !10, file: !3, line: 11, baseType: !16, size: 31, offset: 95, flags: DIFlagBitField, extraData: i64 64)
!18 = !DIGlobalVariableExpression(var: !19)
!19 = distinct !DIGlobalVariable(name: "Nsize", scope: !2, file: !3, line: 12, type: !6, isLocal: false, isDefinition: true)
!20 = !DIGlobalVariableExpression(var: !21)
!21 = distinct !DIGlobalVariable(name: "F1size", scope: !2, file: !3, line: 17, type: !6, isLocal: false, isDefinition: true)
!22 = !DIGlobalVariableExpression(var: !23)
!23 = distinct !DIGlobalVariable(name: "F2size", scope: !2, file: !3, line: 21, type: !6, isLocal: false, isDefinition: true)
!24 = !DIGlobalVariableExpression(var: !25)
!25 = distinct !DIGlobalVariable(name: "F3size", scope: !2, file: !3, line: 26, type: !6, isLocal: false, isDefinition: true)
!26 = !DIGlobalVariableExpression(var: !27)
!27 = distinct !DIGlobalVariable(name: "F4size", scope: !2, file: !3, line: 32, type: !6, isLocal: false, isDefinition: true)
!28 = !DIGlobalVariableExpression(var: !29)
!29 = distinct !DIGlobalVariable(name: "F5size", scope: !2, file: !3, line: 38, type: !6, isLocal: false, isDefinition: true)
!30 = !DIGlobalVariableExpression(var: !31)
!31 = distinct !DIGlobalVariable(name: "F6size", scope: !2, file: !3, line: 44, type: !6, isLocal: false, isDefinition: true)
!32 = !DIGlobalVariableExpression(var: !33)
!33 = distinct !DIGlobalVariable(name: "Msize", scope: !2, file: !3, line: 54, type: !6, isLocal: false, isDefinition: true)
!34 = !DIGlobalVariableExpression(var: !35)
!35 = distinct !DIGlobalVariable(name: "e", scope: !2, file: !3, line: 2, type: !36, isLocal: false, isDefinition: true)
!36 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "test_empty", file: !3, line: 1, elements: !4)
!37 = !DIGlobalVariableExpression(var: !38)
!38 = distinct !DIGlobalVariable(name: "F1", scope: !2, file: !3, line: 17, type: !39, isLocal: false, isDefinition: true)
!39 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "test1", file: !3, line: 14, size: 64, elements: !40)
!40 = !{!41}
!41 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !39, file: !3, line: 15, baseType: !42, size: 1, flags: DIFlagBitField, extraData: i64 0)
!42 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!43 = !DIGlobalVariableExpression(var: !44)
!44 = distinct !DIGlobalVariable(name: "F2", scope: !2, file: !3, line: 21, type: !45, isLocal: false, isDefinition: true)
!45 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "test2", file: !3, line: 19, size: 64, elements: !46)
!46 = !{!47}
!47 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !45, file: !3, line: 20, baseType: !16, size: 4, flags: DIFlagBitField, extraData: i64 0)
!48 = !DIGlobalVariableExpression(var: !49)
!49 = distinct !DIGlobalVariable(name: "F3", scope: !2, file: !3, line: 26, type: !50, isLocal: false, isDefinition: true)
!50 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "test3", file: !3, line: 23, size: 24, elements: !51)
!51 = !{!52}
!52 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !50, file: !3, line: 24, baseType: !42, size: 1, flags: DIFlagBitField, extraData: i64 0)
!53 = !DIGlobalVariableExpression(var: !54)
!54 = distinct !DIGlobalVariable(name: "F4", scope: !2, file: !3, line: 32, type: !55, isLocal: false, isDefinition: true)
!55 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "test4", file: !3, line: 28, size: 48, elements: !56)
!56 = !{!57, !58}
!57 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !55, file: !3, line: 29, baseType: !42, size: 1, flags: DIFlagBitField, extraData: i64 0)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "Y", scope: !55, file: !3, line: 31, baseType: !59, size: 14, offset: 32, flags: DIFlagBitField, extraData: i64 32)
!59 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!60 = !DIGlobalVariableExpression(var: !61)
!61 = distinct !DIGlobalVariable(name: "F5", scope: !2, file: !3, line: 38, type: !62, isLocal: false, isDefinition: true)
!62 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "test5", file: !3, line: 34, size: 24, elements: !63)
!63 = !{!64, !65}
!64 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !62, file: !3, line: 35, baseType: !42, size: 1, flags: DIFlagBitField, extraData: i64 0)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "Y", scope: !62, file: !3, line: 37, baseType: !42, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!66 = !DIGlobalVariableExpression(var: !67)
!67 = distinct !DIGlobalVariable(name: "F6", scope: !2, file: !3, line: 44, type: !68, isLocal: false, isDefinition: true)
!68 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "test6", file: !3, line: 40, size: 64, elements: !69)
!69 = !{!70, !71}
!70 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !68, file: !3, line: 41, baseType: !42, size: 1, flags: DIFlagBitField, extraData: i64 0)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "Y", scope: !68, file: !3, line: 43, baseType: !6, size: 21, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!72 = !DIGlobalVariableExpression(var: !73)
!73 = distinct !DIGlobalVariable(name: "M", scope: !2, file: !3, line: 54, type: !74, isLocal: false, isDefinition: true)
!74 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "test", file: !3, line: 46, size: 64, elements: !75)
!75 = !{!76, !77, !78, !79, !80}
!76 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !74, file: !3, line: 47, baseType: !42, size: 8)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "d", scope: !74, file: !3, line: 48, baseType: !42, size: 3, offset: 8, flags: DIFlagBitField, extraData: i64 8)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !74, file: !3, line: 49, baseType: !42, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 8)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !74, file: !3, line: 51, baseType: !42, size: 8, offset: 32)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !74, file: !3, line: 53, baseType: !16, size: 4, offset: 40, flags: DIFlagBitField, extraData: i64 40)
!81 = !{i32 2, !"Dwarf Version", i32 4}
!82 = !{i32 2, !"Debug Info Version", i32 3}
!83 = !{i32 1, !"wchar_size", i32 4}
!84 = !{!"clang version 5.0.1 (tags/RELEASE_501/final)"}
!85 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 58, type: !86, isLocal: false, isDefinition: true, scopeLine: 58, isOptimized: false, unit: !2, variables: !4)
!86 = !DISubroutineType(types: !5)
!87 = !DILocation(line: 60, column: 12, scope: !85)
!88 = !DILocation(line: 60, column: 10, scope: !85)
!89 = !DILocation(line: 60, column: 17, scope: !85)
!90 = !DILocation(line: 60, column: 3, scope: !85)
!91 = !DILocation(line: 61, column: 12, scope: !85)
!92 = !DILocation(line: 61, column: 17, scope: !85)
!93 = !DILocation(line: 61, column: 3, scope: !85)
!94 = !DILocation(line: 62, column: 12, scope: !85)
!95 = !DILocation(line: 62, column: 10, scope: !85)
!96 = !DILocation(line: 62, column: 14, scope: !85)
!97 = !DILocation(line: 62, column: 3, scope: !85)
!98 = !DILocation(line: 63, column: 12, scope: !85)
!99 = !DILocation(line: 63, column: 10, scope: !85)
!100 = !DILocation(line: 63, column: 14, scope: !85)
!101 = !DILocation(line: 63, column: 3, scope: !85)
!102 = !DILocation(line: 70, column: 13, scope: !85)
!103 = !DILocation(line: 70, column: 10, scope: !85)
!104 = !DILocation(line: 70, column: 15, scope: !85)
!105 = !DILocation(line: 70, column: 3, scope: !85)
!106 = !DILocation(line: 71, column: 13, scope: !85)
!107 = !DILocation(line: 71, column: 10, scope: !85)
!108 = !DILocation(line: 71, column: 15, scope: !85)
!109 = !DILocation(line: 71, column: 3, scope: !85)
!110 = !DILocation(line: 72, column: 13, scope: !85)
!111 = !DILocation(line: 72, column: 10, scope: !85)
!112 = !DILocation(line: 72, column: 15, scope: !85)
!113 = !DILocation(line: 72, column: 3, scope: !85)
!114 = !DILocation(line: 73, column: 13, scope: !85)
!115 = !DILocation(line: 73, column: 10, scope: !85)
!116 = !DILocation(line: 73, column: 15, scope: !85)
!117 = !DILocation(line: 73, column: 3, scope: !85)
!118 = !DILocation(line: 74, column: 13, scope: !85)
!119 = !DILocation(line: 74, column: 10, scope: !85)
!120 = !DILocation(line: 74, column: 15, scope: !85)
!121 = !DILocation(line: 74, column: 3, scope: !85)
!122 = !DILocation(line: 75, column: 13, scope: !85)
!123 = !DILocation(line: 75, column: 10, scope: !85)
!124 = !DILocation(line: 75, column: 15, scope: !85)
!125 = !DILocation(line: 75, column: 3, scope: !85)
!126 = !DILocation(line: 76, column: 13, scope: !85)
!127 = !DILocation(line: 76, column: 10, scope: !85)
!128 = !DILocation(line: 76, column: 15, scope: !85)
!129 = !DILocation(line: 76, column: 3, scope: !85)
!130 = !DILocation(line: 77, column: 13, scope: !85)
!131 = !DILocation(line: 77, column: 10, scope: !85)
!132 = !DILocation(line: 77, column: 15, scope: !85)
!133 = !DILocation(line: 77, column: 3, scope: !85)
!134 = !DILocation(line: 78, column: 13, scope: !85)
!135 = !DILocation(line: 78, column: 15, scope: !85)
!136 = !DILocation(line: 78, column: 3, scope: !85)
!137 = !DILocation(line: 80, column: 12, scope: !85)
!138 = !DILocation(line: 80, column: 10, scope: !85)
!139 = !DILocation(line: 80, column: 14, scope: !85)
!140 = !DILocation(line: 80, column: 3, scope: !85)
!141 = !DILocation(line: 81, column: 12, scope: !85)
!142 = !DILocation(line: 81, column: 10, scope: !85)
!143 = !DILocation(line: 81, column: 14, scope: !85)
!144 = !DILocation(line: 81, column: 3, scope: !85)
!145 = !DILocation(line: 82, column: 12, scope: !85)
!146 = !DILocation(line: 82, column: 10, scope: !85)
!147 = !DILocation(line: 82, column: 14, scope: !85)
!148 = !DILocation(line: 82, column: 3, scope: !85)
!149 = !DILocation(line: 83, column: 12, scope: !85)
!150 = !DILocation(line: 83, column: 10, scope: !85)
!151 = !DILocation(line: 83, column: 14, scope: !85)
!152 = !DILocation(line: 83, column: 3, scope: !85)
!153 = !DILocation(line: 84, column: 17, scope: !85)
!154 = !DILocation(line: 84, column: 10, scope: !85)
!155 = !DILocation(line: 84, column: 19, scope: !85)
!156 = !DILocation(line: 84, column: 3, scope: !85)
!157 = !DILocation(line: 85, column: 3, scope: !85)
