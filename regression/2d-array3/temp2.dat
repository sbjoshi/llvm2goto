CBMC version 5.11 (cbmc-5.11-dirty) 64-bit x86_64 linux
Parsing main.c
Converting
Type-checking main
Generating GOTO Program
Adding CPROVER library (x86_64)
Removal of function pointers and virtual functions
Generic Property Instrumentation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

__CPROVER__start /* __CPROVER__start */
        // 25 no location
        // Labels: __CPROVER_HIDE
        __CPROVER_initialize();
        // 26 file main.c line 1
        main();
        // 27 file main.c line 1
        return' = main#return_value;
        // 28 file main.c line 1
        dead main#return_value;
        // 29 file main.c line 1
        OUTPUT("return", return');
        // 30 no location
        END_FUNCTION

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

__CPROVER_initialize /* __CPROVER_initialize */
        // 13 file <built-in-additions> line 11
        // Labels: __CPROVER_HIDE
        __CPROVER_dead_object = NULL;
        // 14 file <built-in-additions> line 10
        __CPROVER_deallocated = NULL;
        // 15 file <built-in-additions> line 14
        __CPROVER_malloc_is_new_array = 0 != 0;
        // 16 file <built-in-additions> line 12
        __CPROVER_malloc_object = NULL;
        // 17 file <built-in-additions> line 13
        __CPROVER_malloc_size = 0ul;
        // 18 file <built-in-additions> line 15
        __CPROVER_memory_leak = NULL;
        // 19 file <built-in-additions> line 8
        __CPROVER_next_thread_id = (unsigned long int)0;
        // 20 file <built-in-additions> line 29
        __CPROVER_pipe_count = (unsigned int)0;
        // 21 file <built-in-additions> line 20
        __CPROVER_rounding_mode = 0;
        // 22 file <built-in-additions> line 6
        __CPROVER_thread_id = (unsigned long int)0;
        // 23 file <built-in-additions> line 7
        __CPROVER_threads_exited = ARRAY_OF(FALSE);
        // 24 no location
        END_FUNCTION

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

main /* main */
        // 0 file main.c line 2 function main
        signed int a[3l][3l];
        // 1 file main.c line 2 function main
        a = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
        // 2 file main.c line 3 function main
        signed int (*p1)[3l];
        // 3 file main.c line 4 function main
        p1 = &a[(signed long int)1];
        // 4 file main.c line 5 function main
        signed int *p2;
        // 5 file main.c line 6 function main
        p2 = *p1 + (signed long int)2;
        // 6 file main.c line 7 function main
        *p2 = 100;
        // 7 file main.c line 8 function main
        ASSERT a[(signed long int)1][(signed long int)2] == 100 // assertion a[(signed long int)1][(signed long int)2] == 100
        // 8 file main.c line 9 function main
        dead p2;
        // 9 file main.c line 9 function main
        dead p1;
        // 10 file main.c line 9 function main
        dead a;
        // 11 file main.c line 9 function main
        main#return_value = NONDET(signed int);
        // 12 file main.c line 9 function main
        END_FUNCTION

